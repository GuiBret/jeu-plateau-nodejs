const Joueur = require("./joueur");
const Grille = require("./grille");

class Game {
    constructor(id) {
        this.game_id = id; // ID créé par GameHub pour éviter potentiels doublons
        this.nb_tours = 0;
        this.socket_j1 = null;
        this.socket_j2 = null;
        this.continuationReady = false; // Evitera les doublons avec les broadcasts
        this.local = false
    }
    
    setParams(noms_joueurs, local, socket_j1) { // Voir si local nécessaire ici
        if(local) {
            this.socket_j1 = socket_j1;
            this.local = true;
        }    
        
        this.j1 = new Joueur(0, noms_joueurs[0]);
        this.j2 = new Joueur(1, noms_joueurs[1]);    
        this.generateGrid();
        
    }
    
    generateGrid() {
        this.grille = new Grille(this.j1, this.j2);
    }
    addSocket(socket) { // Renvoie l'id du joueur (défini par l'ordre dans lequel il est arrivé à cette fonction)
        let player_id = -1
        if(!this.socket_j1) { // SI le socket du J1 n'est pas encore défini, on l'attribue
            player_id = 0;
            this.socket_j1 = socket;
        } else {
            if(!this.socket_j2) {
                player_id = 1;
                this.socket_j2 = socket;
            } // Si les 2 sockets sont déjà définis, on ne les modifie pas
        }
        
        return player_id;
    }
    
    getGridContent() {
        return this.grille.grille;
    }
    
    incrementTurns() {
        this.nb_tours += 1;
    }
    
    ajouterInfosJoueur(params) {
        let nom_joueur = params["nom"],
            id_joueur = params["id"],
            online_id = params["online_id"];
        
        if(id_joueur === 0) {
            this.j1.nom = nom_joueur;
            this.j1.online_id = online_id;
            
        } else {
            this.j2.nom = nom_joueur;
            this.j2.online_id = online_id;
        }
    
    }
        
    
    estEnCombat() { // Relaie le résultat de la fonction de la classe Grille
        return this.grille.estEnCombat();
    }
    
    getPossibleMoves(cur_player) {
        return this.grille.calculDepDispos(this.grille.joueurs[cur_player].position);
    }
    
    getCurrentPlayer() {
        return this.grille.joueurs[this.nb_tours % 2];
    }
    
    getEnemy() {
        return this.grille.joueurs[(this.nb_tours+1) % 2]
    }
    
    getPlayers() {
        return {"player1": this.j1, "player2": this.j2};
    }
    getCurrentGrid() {
        return this.grille.grille;
    }
    
}

module.exports = Game;