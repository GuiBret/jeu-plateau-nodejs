/*jshint esversion:6*/

class GameSearchSocketManager {
    constructor(socket, DBConnection, io, gh) {
        this.socket = socket;
        this.DBConnection = DBConnection;

        this.io = io; 
        this.gh = gh; // GameHub
    

        
        this.socket.on("inscriptionRoom", this.enterRoom.bind(this));
        this.socket.on("confirmationPartieOnline", this.onlineGameConfirmation.bind(this));
        this.socket.on("confirmationPartieLocale", this.localGameConfirmation.bind(this));
        this.socket.on("envoiNomJoueur", this.usernameManagement.bind(this));
        this.socket.on("gridCreated", this.launchFirstTurn.bind(this));
        
        this.socket.on("demandeDeplacement", this.requestMovement.bind(this));
        this.socket.on("newTurn", this.launchNewTurn.bind(this));
        
        this.socket.on("decisionJoueur", this.combatTurn.bind(this));
        this.socket.on("surrenderOffline", this.surrenderOffline.bind(this));
        this.socket.on("surrenderOnline", this.surrenderOnline.bind(this));
                
    }
    
    enterRoom(id) {
        return this.gh.getGame(id).then((game) => {

           this.socket.join(`room-game${ game.game_id}`);

            
        });
    }
    
    onlineGameConfirmation(params) { 
        let gameID = params["id"],
            nom_joueur = params["nom_joueur"];
        
        this.socket.gameID = gameID;
        this.socket.nom_joueur = nom_joueur;
        
        return this.gh.getGame(gameID).then((game) => { // Quand on a récupéré le match, on vérifie si les 2 joueurs ont envoyé leur nom, si oui, on lance la partie
            let socket = params["socket"],
                player_id = game.addSocket(this.socket);

            if(player_id === 1) { // Si les 2 joueurs ont vu leur socket créé, on peut envoyer la grille
              game.setParams(["", ""], false); // 3e argument (socket_j1) ignoré vu qu'on est en ligne
              let grille = game.getCurrentGrid();
                
              game.socket_j1.emit("envoiGrilleOnline", {"grid": grille, "player_id": 0});
              this.socket.emit("envoiGrilleOnline", {"grid": grille, "player_id": player_id});  
            }
        })
    }
    
    localGameConfirmation(params) {
        
        let gameID = params["id"],
            noms = params["noms"];
        
        this.socket.gameID = gameID;
        
        return this.gh.getGame(gameID).then((game) => {
            
            let socket = params["socket"],
                noms = params["noms"];
            
            game.setParams(noms, true, socket);
            
            let grille = game.getCurrentGrid();

            this.socket.emit("envoiGrille", {"grille": grille});
            
        });
        
    }
    
    
    usernameManagement(params) { // Sends the usernames to both players in online mode

        return this.gh.getGame(this.socket.gameID).then((game) => {
            game.ajouterInfosJoueur(params); // Params : contient le nom et les ids locaux & online du joueur ["nom"], ["id"], et [online_id]
            
            this.io.in(`room-game${ game.game_id}`).emit("envoiNomVersClient", {"nom" : params["nom"], "id": params["id"]});
        });   
    }
    
    launchFirstTurn() {        
        return this.gh.getGame(this.socket.gameID).then((game) => { // Dès qu'on a récupéré le match actuel, on annonce le début du match
            let cur_player = 0;
            if(game.local) {

                this.socket.emit("lancementTour", {"joueur_actuel": cur_player, "combatLance": game.estEnCombat(), "dep_possibles": game.getPossibleMoves(cur_player), "ancienne_arme": -1})
                        
            } else {
                         
                if(game.continuationReady) {
                
                    game.continuationReady = false;
                    this.io.in(`room-game${ game.game_id}`).emit("lancementTour", {"joueur_actuel": cur_player, "combatLance": game.estEnCombat(), "dep_possibles": game.getPossibleMoves(cur_player), "ancienne_arme": -1});
                        
                } else { // Utilisé pour éviter de passer 2 fois dans ce callback
                
                    game.continuationReady = true;
                }
                            
            }
        
        });
    }
    
    requestMovement(position) {
        
        return this.gh.getGame(this.socket.gameID).then((game) => {
            let cur_player = game.getCurrentPlayer(),
                    prev_position = cur_player.position,
                    arme = game.grille.updatePosition(game.getCurrentPlayer(), [parseInt(position[0]), parseInt(position[1])], game.nb_tours);
               
            this.io.sockets.in(`room-game${ game.game_id}`).emit("confirmationDeplacement", {"position": position, "prev_position":prev_position, "id_arme":arme,  "grille": game.getCurrentGrid(), "cur_player": cur_player});  
            
        });
    }
    
    launchNewTurn(arme_posee) {
        let cur_player;
        
        this.gh.getGame(this.socket.gameID).then((game) => {
            let prev_player = game.getEnemy(); // Pour avoir le joueur dont c'était le tour, on le récupère via enemy puis qu'on a mis incrementTurns à la fin de demandeDeplacement pour éviter les doublons
            
            if(game.continuationReady || game.local) {
                if(!game.local) {
                   game.continuationReady = false;
                }
                game.incrementTurns();
                
                let cur_player_id = game.nb_tours % 2;

                if(game.estEnCombat()) {
                
                    if(prev_player.pv === 0) {

                        let winner = game.getEnemy(),
                            loser = game.getCurrentPlayer();

                        if(!game.local) {

                            this.DBConnection.addMatch({"winner": winner.online_id, "loser": loser.online_id, "type": "online", "remaining_hp": winner.pv}); // On envoie les données de partie au serveur, mis online pour le moment    
                        }
                        
                        this.gh.deleteGame(game.game_id);
                        
                        this.io.sockets.in(`room-game${ game.game_id}`).emit("partieTerminee", {"winner": winner.nom, "turns":game.nb_tours, "remaining_hp": winner.pv});
                        
                    } else {
                        this.io.sockets.in(`room-game${ game.game_id}`).emit("lancementTourCombat", {"joueur_actuel": game.nb_tours % 2});
                    }                        
                } else { // Si l'on n'est pas en combat
                    
                    this.io.sockets.in(`room-game${ game.game_id}`).emit("lancementTour", {"joueur_actuel": game.nb_tours % 2, "dep_possibles": game.getPossibleMoves(cur_player_id), "ancienne_arme":game.getCurrentPlayer().ancienne_arme});       
                }   
            } else {
                    game.continuationReady = true;
        
            } 
        });
    }
    
    combatTurn(decision) {
        
        this.gh.getGame(this.socket.gameID).then((game) => {
            
            let attacker = game.getCurrentPlayer(),
                defender = game.getEnemy(),
                remaining_hp;
            
            
            if(decision === "defense") {
                attacker.updatePosture(false);
               
            } else {

                defender.recevoirDegats(attacker.arme);
                remaining_hp = defender.pv;
                attacker.updatePosture(true); // Puisqu'il a attaqué, il sort de sa posture défensive
            }
            
            this.io.sockets.in(`room-game${ game.game_id}`).emit("resultatDecision", {"id": defender.id, "remaining_hp": remaining_hp, "arme": attacker.arme.id, "posture": defender.posture});
        });
       
    }
    
    surrenderOffline() {
        this.gh.deleteGame(this.socket.gameID);
        let game_id = this.socket.gameID;
        
        this.socket = null; 
        this.io.sockets.in(`room-game${game_id}`).emit("surrenderedOffline");
    }
    
    surrenderOnline(params) {
        let surrendered_player_id = params["id"],
            game_id = this.socket.gameID;
        
        return new Promise((resolve, reject) => {
            
            
            this.gh.getGame(this.socket.gameID).then((game) => {

                // Getting the other player's info for the DB request
            
                let winner = (game.getCurrentPlayer().online_id === surrendered_player_id) ? game.getEnemy() : game.getCurrentPlayer(),
                    loser = surrendered_player_id,
                    info = {"winner": winner.online_id, "loser": surrendered_player_id, "remaining_hp": winner.pv, "type": "online"};
                
                this.DBConnection.addMatch(info);
                
                this.io.sockets.in(`room-game${game.game_id}`).emit("surrenderedOnline", {"id": surrendered_player_id});
        
                this.socket = null;
                this.gh.deleteGame(game_id);
                
                
                resolve();
        
            });
                
        });
            
    }
}

module.exports = GameSearchSocketManager;