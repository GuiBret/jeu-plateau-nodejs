/*jshint esversion:6*/

class GameSearchSocketManager {
    constructor(socket, DBConnection, io, gh) {
        this.socket = socket;
        this.DBConnection = DBConnection;
        this.io = io; 
        this.gh = gh; // GameHub
        
        this.socket.on("connectionRequest", this.connectionRequest.bind(this));
        
        this.socket.on("demandePartieLocale", this.localGameRequest.bind(this));
        this.socket.on("demandePartieOnline", this.onlineGameRequest.bind(this));
                
    }
    
    connectionRequest(userData) {

        return this.DBConnection.getUserData(userData).then((res) => {
           if(res === "WRONG_PASSWORD") {
                this.socket.emit("wrongPassword");
           } else {
                this.socket.emit("connectionAccepted", res);    
           }
           
       });
    }
    
    localGameRequest() {
        let game_id = this.gh.createGame();
        
        this.socket.emit("partieLocaleTrouvee", {"id": game_id});
    }
    
    onlineGameRequest() {
        console.log("appel onlinegamerequest");
        this.io.of("/").in("room-partieOnline").clients((err, clients) => { // On regarde les sockets des clients recherchant une partie
            console.log(clients);
           if(clients.length !== 0) { // Si l'on a trouvé au moins un client recherchant une partie
               let id_socket_recherche = clients[0]; // TODO : par la suite, ajouter attribut reserved pour éviter multi réservation de 

                let socket_ennemi = this.io.sockets.connected[id_socket_recherche];

                let game_id = this.gh.createGame();
                
                socket_ennemi.leave("room-partieOnline");

                this.socket.emit("onlineEnemyFound", {"id": game_id});
                socket_ennemi.emit("onlineEnemyFound", {"id": game_id}); // On attribue aux clients l'id pour pouvoir retrouver la partie quand une requête arrivera
           } else {
                this.socket.join("room-partieOnline");
           }
            
            
        });
        
    }

    
}

module.exports = GameSearchSocketManager;